---
# Community resources: http://concourse.ci/configuring-resource-types.html
resource_types:
  # Fetches secrets custom paths in Vault: https://github.com/Docurated/concourse-vault-resource
  - name: vault
    type: docker-image
    source:
      repository: docurated/concourse-vault-resource
      tag: latest

  # Interacts with GitHub commit status: https://github.com/dpb587/github-status-resource
  - name: github-status
    type: docker-image
    source:
      repository: dpb587/github-status-resource
      tag: master

  # Sends status emails: https://github.com/pivotal-cf/email-resource
  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource


# Resources used by the pipeline: http://concourse.ci/configuring-resources.html
resources:
  # GitHub repository containing terraform templates
  - name: infrastructure-repo
    type: git
    source:
      uri: ((github-uri))
      branch: ((github-branch))
      private_key: ((github-private-key))

  # GitHub containing CI scripts (e.g. this repo)
  - name: ci-repo
    type: git
    source:
      uri: https://github.com/cesar-rodriguez/concourse-pipelines.git

  # Status of commit going through the pipeline https://github.com/dpb587/github-status-resource
  - name: commit-status
    type: github-status
    source:
      repository: ((github-org))/((github-repo))
      access_token: ((github-personal-access-token))
      branch: ((github-branch))
      context: concourse-ci

  # A GitHub release is created with every version change
  - name: release
    type: github-release
    source:
      owner: ((github-org))
      repository: ((github-repo))
      access_token: ((github-personal-access-token))

  # Tracks the semantic version of the infrastructure repository: https://github.com/concourse/semver-resource
  - name: version
    type: semver
    source:
      driver: git
      initial_version: 0.0.1
      uri: ((github-uri))
      branch: version
      file: version
      private_key: ((github-private-key))

  # Sends email when build/test are sucessful: https://github.com/pivotal-cf/email-resource
  - name: send-email
    type: email
    source:
      smtp:
        host: ((smtp-host))
        port: ((smtp-port))
        username: ((smtp-username))
        password: ((smtp-password))
      from: ((email-from))
      to: [ ((email-from)) ]

  # Interacting with vault to get AWS credentials
  - name: vault
    type: vault
    source:
      url: ((vault-address))
      auth_method: AppRole
      role_id: ((vault-role-id))
      secret_id: ((vault-secret-id))


# Jobs to be executed against the resources
# http://concourse.ci/configuring-jobs.html
jobs:
  # Builds terraform plan output and stores it in S3
  - name: build
    public: true
    serial_groups: [version]
    plan:
      # Running get resources in parallel.
      - aggregate:
        - get: infrastructure-repo
          trigger: true
        - get: ci-repo
        - get: version
          params: {pre: rc}
        # The paths where Vault resource needs to read STS tokens needs to be provided
        - get: vault
          params:
            paths:
              - ((vault-stage-sts-path))
              - ((vault-prod-sts-path))
      - put: commit-status
        params:
          commit: infrastructure-repo
          state: pending
      # Generates AWS credentials file: http://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html
      - task: get-credentials
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: digitalgenius/alpine-jq-git, tag: "latest"}
          params:
            DEBUG_MODE: ((debug-mode))
            PIPELINE_AWS_ROLE: ((vault-aws-role-name))
          inputs:
          - name: vault
          - name: ci-repo
          outputs:
          - name: aws-creds
          run:
            path: sh
            args: ["ci-repo/scripts/ci/get_aws_credentials.sh"]
      - aggregate:
        # Checks if terraform is properly formatted
        - task: terraform-format
          config:
            platform: linux
            image_resource:
              type: docker-image
              source: {repository: hashicorp/terraform, tag: "light"}
            params:
              DEBUG_MODE: ((debug-mode))
            inputs:
              - name: infrastructure-repo
              - name: ci-repo
            run:
              path: sh
              args: ["ci-repo/scripts/ci/terraform_format.sh"]
        - do:
          # Runs terraform plan and outputs tar file
          - task: terraform-plan
            config:
              platform: linux
              image_resource:
                type: docker-image
                source: {repository: hashicorp/terraform, tag: "light"}
              params:
                DEBUG_MODE: ((debug-mode))
                BUILD_PIPELINE_NAME: ((github-repo))
              inputs:
                - name: aws-creds
                - name: infrastructure-repo
                - name: ci-repo
                - name: version
              outputs:
                - name: terraform-plan-out
              run:
                path: sh
                args: ["ci-repo/scripts/ci/terraform_plan.sh"]
          # Uploads plan output tar file to s3
          - task: put-artifacts
            config:
              platform: linux
              image_resource:
                type: docker-image
                source: {repository: mesosphere/aws-cli, tag: "latest"}
              params:
                DEBUG_MODE: ((debug-mode))
                BUILD_PIPELINE_NAME: ((github-repo))
                BUCKET_NAME: ((s3-bucket-name))
                AWS_PROFILE: ((s3-bucket-profile))
              inputs:
                - name: aws-creds
                - name: ci-repo
                - name: terraform-plan-out
                - name: version
              run:
                path: sh
                args: ["ci-repo/scripts/ci/put_artifacts.sh"]
    on_failure:
      put: commit-status
      params:
        commit: infrastructure-repo
        state: failure

  # test - Perform "unit tests" on terraform resources
  - name: test
    public: true
    serial_groups: [version]
    plan:
    - aggregate:
        - get: infrastructure-repo
          passed: ["build"]
          trigger: true
        - get: ci-repo
        - get: version
          params: {pre: rc}
    # Static code analysis of terraform resources using terrascan: https://github.com/cesar-rodriguez/terrascan
    - task: terrascan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: python, tag: "3.6.2"}
        params:
          DEBUG_MODE: ((debug-mode))
        inputs:
          - name: infrastructure-repo
          - name: ci-repo
        run:
          path: sh
          args: ["ci-repo/scripts/ci/terrascan.sh"]
    on_failure:
      put: commit-status
      params:
        commit: infrastructure-repo
        state: failure
    on_success:
      do:
      - put: commit-status
        params:
          commit: infrastructure-repo
          state: success
      - put: send-email
        params:
          subject_text: "[concourse-ci] ((github-org))/((github-repo)) build successful: ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}"
          body_text: "Click here to provision resources: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/provision"

  # provision - Gets the built terraform plan form S3 and privisions the infrastructure
  - name: provision
    public: true
    serial_groups: [version]
    plan:
      # Running get resources in parallel.
      - aggregate:
        - get: infrastructure-repo
          passed: ["test"]
        - get: ci-repo
        - get: version
          params: {pre: rc}
        # The paths where Vault resource needs to read STS tokens needs to be provided
        - get: vault
          params:
            paths:
              - ((vault-stage-sts-path))
              - ((vault-prod-sts-path))
      # Generates AWS credentials file: http://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html
      - task: get-credentials
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: digitalgenius/alpine-jq-git, tag: "latest"}
          params:
            DEBUG_MODE: ((debug-mode))
            PIPELINE_AWS_ROLE: ((vault-aws-role-name))
          inputs:
          - name: vault
          - name: ci-repo
          outputs:
          - name: aws-creds
          run:
            path: sh
            args: ["ci-repo/scripts/ci/get_aws_credentials.sh"]
      # Gets plan output tar file from s3
      - task: get-artifacts
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: mesosphere/aws-cli, tag: "latest"}
          params:
            DEBUG_MODE: ((debug-mode))
            BUILD_PIPELINE_NAME: ((github-repo))
            BUCKET_NAME: ((s3-bucket-name))
            AWS_PROFILE: ((s3-bucket-profile))
          inputs:
            - name: aws-creds
            - name: ci-repo
            - name: version
          outputs:
            - name: artifacts
          run:
            path: sh
            args: ["ci-repo/scripts/ci/get_artifacts.sh"]
      # Performs terraform applies for each environment with changes
      - task: terraform-apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: hashicorp/terraform, tag: "light"}
          params:
            DEBUG_MODE: ((debug-mode))
            BUILD_PIPELINE_NAME: ((github-repo))
          inputs:
            - name: aws-creds
            - name: infrastructure-repo
            - name: ci-repo
            - name: version
            - name: artifacts
          run:
            path: sh
            args: ["ci-repo/scripts/ci/terraform_apply.sh"]
      - put: version
        params: { bump: final }

  # Create GitHub Release. Automatically triggered
  - name: release
    serial_groups: [version]
    plan:
    - get: ci-repo
    - get: version
      passed: [provision]
      trigger: true
    # Gets version information for release
    - task: get-version
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: alpine, tag: "3.6"}
        params:
          DEBUG_MODE: ((debug-mode))
          BUILD_PIPELINE_NAME: ((github-repo))
        inputs:
          - name: ci-repo
          - name: version
        outputs:
          - name: release
        run:
          path: sh
          args: ["ci-repo/scripts/ci/get_version.sh"]
    - put: release
      params:
        name: release/name
        tag:  release/tag

  # Used for hotfixes (e.g. 0.0.x versioning). Automatically triggered
  - name: bump-patch
    serial_groups: [version]
    plan:
    - get: version
      passed: [provision]
      trigger: true
    - put: version
      params: {bump: patch, pre: rc}

  # Used for changes that are backwards compatible (e.g. 0.x.0 versioning). Needs to be manually triggered
  - name: bump-minor
    serial_groups: [version]
    plan:
    - put: version
      params: {bump: minor}

  # Used for breaking changes (e.g. x.0.0 versioning). Needs to be manually triggered
  - name: bump-major
    serial_groups: [version]
    plan:
    - put: version
      params: {bump: major}
