---
# Community resources: http://concourse.ci/configuring-resource-types.html
resource_types:
  # Fetches secrets custom paths in Vault: https://github.com/Docurated/concourse-vault-resource
  - name: vault
    type: docker-image
    source:
      repository: docurated/concourse-vault-resource
      tag: latest

  # Interacts with GitHub pull requests: https://github.com/jtarchie/github-pullrequest-resource
  - name: pull-request
    type: docker-image
    source:
      repository: jtarchie/pr


# Resources used by the pipeline: http://concourse.ci/configuring-resources.html
resources:
  # GitHub containing CI scripts (e.g. this repo)
  - name: ci-repo
    type: git
    source:
      uri: https://github.com/cesar-rodriguez/concourse-pipelines.git

  # Interacting with vault to get AWS credentials
  - name: vault
    type: vault
    source:
      url: ((vault-address))
      auth_method: AppRole
      role_id: ((vault-role-id))
      secret_id: ((vault-secret-id))

  # Interacts with GitHub pull requests
  - name: pull-request
    type: pull-request
    source:
      access_token: ((github-personal-access-token))
      private_key:  ((github-private-key))
      repo: ((github-org))/((github-repo))
      base: ((github-branch))


# Jobs to be executed against the resources
# http://concourse.ci/configuring-jobs.html
jobs:
  # Builds terraform plan
  - name: build
    public: true
    serial_groups: [pr]
    plan:
      # Running get resources in parallel.
      - aggregate:
        # The paths where Vault resource needs to read STS tokens needs to be provided
        - get: vault
          params:
            paths:
              - ((vault-stage-sts-path))
              - ((vault-prod-sts-path))
        - get: ci-repo
        - do:
          - get: pull-request
            trigger: true
            version: every
          - put: pull-request
            params:
              path: pull-request
              status: pending
              context: build
      # Generates AWS credentials file: http://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html
      - task: get-credentials
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: digitalgenius/alpine-jq-git, tag: "latest"}
          params:
            DEBUG_MODE: ((debug-mode))
            PIPELINE_AWS_ROLE: ((vault-aws-role-name))
          inputs:
          - name: vault
          - name: ci-repo
          outputs:
          - name: aws-creds
          run:
            path: sh
            args: ["ci-repo/scripts/ci/get_aws_credentials.sh"]
      - task: terraform-format
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: hashicorp/terraform, tag: "light"}
          params:
            DEBUG_MODE: ((debug-mode))
          inputs:
            - name: pull-request
            - name: ci-repo
          outputs:
            - name: pull-request-comment
          run:
            path: sh
            args: ["ci-repo/scripts/ci/terraform_format.sh"]
        on_failure:
          put: pull-request
          params:
            path: pull-request
            status: failure
            comment: "pull-request-comment/comment"
            context: build
      # Runs terraform plan
      - task: terraform-plan
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: hashicorp/terraform, tag: "light"}
          params:
            DEBUG_MODE: ((debug-mode))
            BUILD_PIPELINE_NAME: ((github-repo))
          inputs:
            - name: aws-creds
            - name: pull-request
              path: infrastructure-repo
            - name: ci-repo
          outputs:
            - name: terraform-plan-out
            - name: pull-request-comment
          run:
            path: sh
            args: ["ci-repo/scripts/ci/terraform_plan_pr.sh"]
        on_failure:
          put: pull-request
          params:
            path: pull-request
            status: failure
            comment: "pull-request-comment/comment"
            context: build
        on_success:
          put: pull-request
          params:
            path: pull-request
            status: success
            comment: "pull-request-comment/comment"
            context: build

  # test - Perform "unit tests" on terraform resources
  - name: test
    public: true
    serial_groups: [pr]
    plan:
    - aggregate:
      - get: ci-repo
      - do:
        - get: pull-request
          trigger: true
          passed: ["build"]
          version: every
        - put: pull-request
          params:
            path: pull-request
            status: pending
            context: test
    # Static code analysis of terraform resources using terrascan: https://github.com/cesar-rodriguez/terrascan
    - task: terrascan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: python, tag: "3.6.2"}
        params:
          DEBUG_MODE: ((debug-mode))
        inputs:
          - name: ci-repo
          - name: pull-request
        outputs:
          - name: pull-request-comment
        run:
          path: sh
          args: ["ci-repo/scripts/ci/terrascan-pr.sh"]
      on_failure:
        put: pull-request
        params:
          path: pull-request
          status: failure
          comment: "pull-request-comment/comment"
          context: test
    on_success:
      put: pull-request
      params:
        path: pull-request
        status: success
        context: test
    on_failure:
        put: pull-request
        params:
          path: pull-request
          status: failure
          context: test
